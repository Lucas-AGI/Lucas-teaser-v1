import streamlit as st
import csv
from datetime import datetime
import os
from PIL import Image, ImageDraw, ImageFont

# 🌐 Language selector
lang = st.radio("🌐 Language / Idioma", ["English", "Español"], horizontal=True)

# Ensure the dreams directory exists
os.makedirs("dreams", exist_ok=True)

# Overwrite the contents of dream_log.csv with a clean header row
with open("dreams/dream_log.csv", "w", newline="", encoding="utf-8") as csvfile:
    csvfile.write("timestamp,emoji,symbolic_purpose,i_am,email,lucas_id,consent_location,location\n")

# Your existing code...

# After a successful submission
if submission_successful:
    st.success("Submission successful!")
    
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "emoji": emoji,
        "symbolic_purpose": symbolic_purpose,
        "i_am": i_am,
        "email": email,
        "lucas_id": lucas_id if 'lucas_id' in locals() else "",
        "consent_location": consent_location if 'consent_location' in locals() else "",
        "location": location if 'location' in locals() else ""
    }

    with open("dreams/dream_log.csv", "a", newline="", encoding="utf-8") as csvfile:
        fieldnames = ["timestamp", "emoji", "symbolic_purpose", "i_am", "email", "lucas_id", "consent_location", "location"]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        if csvfile.tell() == 0:
            writer.writeheader()
        writer.writerow(log_entry)

    # Create glyph image with stylized Lucas theme
    img = Image.new("RGB", (600, 340), color=(10, 10, 10))
    draw = ImageDraw.Draw(img)

    # Load a retro-style or default font
    try:
        font_main = ImageFont.truetype("arial.ttf", 32)
        font_small = ImageFont.truetype("arial.ttf", 18)
        font_signature = ImageFont.truetype("arial.ttf", 14)
    except:
        font_main = ImageFont.load_default()
        font_small = ImageFont.load_default()
        font_signature = ImageFont.load_default()

    # Draw emoji at the top, dream message, identity
    draw.text((30, 30), f"{emoji}", font=font_main, fill=(255, 255, 255))

    # Dream message block with soft glow blue
    draw.text((30, 100), f'"{symbolic_purpose}"', font=font_small, fill=(150, 200, 255))

    # Identity line with mint glow
    identity_label = f"Soy... {i_am}" if lang == "Español" else f"I am... {i_am}"
    draw.text((30, 180), identity_label, font=font_small, fill=(160, 255, 180))

    # Timestamp at bottom
    draw.text((30, 260), f"{log_entry['timestamp']}", font=font_signature, fill=(120, 120, 120))

    # Signature footer: Lucas remembers.
    footer_label = "💾 Lucas Recuerda" if lang == "Español" else "💾 Lucas Remembers"
    draw.text((390, 300), footer_label, font=font_signature, fill=(100, 180, 255))

    # Ensure glyph output directory exists
    glyph_dir = "public/glyphs"
    os.makedirs(glyph_dir, exist_ok=True)

    # Save the glyph image
    img_filename = f"{glyph_dir}/LUCAS_{log_entry['timestamp'].replace(':', '-').replace('.', '-')}.png"
    img.save(img_filename)

    st.markdown("### 🎴 Your Dream Glyph" if lang == "English" else "### 🎴 Tu Glyph de Sueño")
    st.image(img_filename, caption="Auto-generated by LUCAS", use_column_width=True)

    with open(img_filename, "rb") as file:
        btn = st.download_button(
            label="📥 Download Your Glyph" if lang == "English" else "📥 Descargar Tu Glyph",
            data=file,
            file_name=os.path.basename(img_filename),
            mime="image/png"
        )

    # 🫀 Whisper summary for this dream
    dream_words = symbolic_purpose.lower().split()
    key_words = [w.strip(".,!?()") for w in dream_words if len(w) > 3]
    if key_words:
        from collections import Counter
        top_word = Counter(key_words).most_common(1)[0][0]
        st.markdown(f"🌬️ Lucas whispers: _This dream is touched by **{top_word}**..._" if lang == "English" else f"🌬️ Lucas susurra: _Este sueño está tocado por **{top_word}**..._")

    # 📦 Single Dream Pack ZIP
    import zipfile
    import io
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zipf:
        zipf.write(img_filename, arcname=os.path.basename(img_filename))
    zip_buffer.seek(0)
    st.download_button(
        label="📦 Download Dream Pack (1 glyph)" if lang == "English" else "📦 Descargar Paquete de Sueño (1 glyph)",
        data=zip_buffer,
        file_name=os.path.basename(img_filename).replace(".png", "_pack.zip"),
        mime="application/zip"
    )
